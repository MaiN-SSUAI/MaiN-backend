# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main", "release" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      working-directory: ./MaiN
      
    steps:
    - name: Slack Notify Start
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK_URL}}
        SLACK_TITLE: 'Job ${{github.job}}: ${{ github.repository }}'
        SLACK_MESSAGE: 'Start'
        SLACK_COLOR: ${{ job.status }}
        SLACK_USERNAME: Github Actions

    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Create application.properties and application.yml based on branch
      env:
        DIR: src/main/resources
        APPLICATION_MAIN_PROPERTIES: ${{ secrets.APPLICATION_MAIN_PROPERTIES }}
        APPLICATION_RELEASE_PROPERTIES: ${{ secrets.APPLICATION_RELEASE_PROPERTIES }}
        APPLICATION_MAIN_YML: ${{ secrets.APPLICATION_MAIN_YML }}
        APPLICATION_RELEASE_YML: ${{ secrets.APPLICATION_RELEASE_YML }}
      run: |
        mkdir -p $DIR
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo $APPLICATION_MAIN_PROPERTIES | base64 --decode > src/main/resources/application.properties
          echo $APPLICATION_MAIN_YML | base64 --decode > src/main/resources/application.yml
        elif [ "${{ github.ref }}" == "refs/heads/release" ]; then
          echo $APPLICATION_RELEASE_PROPERTIES | base64 --decode > src/main/resources/application.properties
          echo $APPLICATION_RELEASE_YML | base64 --decode > src/main/resources/application.yml
        fi
      working-directory: ${{ env.working-directory }}

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Create additional env file
      env:
        DIR: src/main/resources
        CREDENTIALS: ${{ secrets.CREDENTIALS }}
        RESERVE_CALENDAR: ${{ secrets.RESERVE_CALENDAR }}
        FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
      run: |
        mkdir -p $DIR
        echo $CREDENTIALS | base64 --decode > $DIR/credentials.json
        echo $RESERVE_CALENDAR | base64 --decode > $DIR/reservecalendar-410115-141fd088c697.json
        echo $FIREBASE_KEY | base64 --decode > $DIR/main-c987b-firebase-adminsdk-ra8t9-b46c2708c7.json
      working-directory: ${{ env.working-directory }}
      
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.working-directory }}
    - name: Build with Gradle Wrapper
      run: ./gradlew build
      working-directory: ${{ env.working-directory }}
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: cicdsample
        path: ${{ env.working-directory }}/build/libs/*.jar

  deploy-main:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: cicdsample
          path: ./artifacts
      
      - name: Copy jar file to remote (Main Server)
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PEM_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./artifacts/*.jar"
          target: "/home/ubuntu/cicd"
          overwrite: true
      
      - name: executing remote ssh commands using ssh key (Main Server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PEM_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            chmod +x /home/ubuntu/cicd/deploy.sh
            sh /home/ubuntu/cicd/deploy.sh

      - name: Slack Notify End - Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK_URL}}
          SLACK_TITLE: 'Job ${{github.job}}: ${{ github.repository }}'
          SLACK_MESSAGE: 'Main deploy Success'
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: Github Actions

      - name: Slack Notify End - Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK_URL}}
          SLACK_TITLE: 'Job ${{github.job}}: ${{ github.repository }}'
          SLACK_MESSAGE: 'Main deploy Failure'
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: Github Actions

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: cicdsample
          path: ./artifacts
      
      - name: Copy jar file to remote (Dev Server)
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USER }}
          key: ${{ secrets.SSH_DEV_PEM_KEY }}
          port: ${{ secrets.SSH_DEV_PORT }}
          source: "./artifacts/*.jar"
          target: "/home/ubuntu/cicd"
          overwrite: true
      
      - name: executing remote ssh commands using ssh key (Dev Server)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_DEV_HOST }}
          username: ${{ secrets.SSH_DEV_USER }}
          key: ${{ secrets.SSH_DEV_PEM_KEY }}
          port: ${{ secrets.SSH_DEV_PORT }}
          script_stop: true
          script: |
            chmod +x /home/ubuntu/cicd/deploy.sh
            sh /home/ubuntu/cicd/deploy.sh

      - name: Slack Notify End - Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK_URL}}
          SLACK_TITLE: 'Job ${{github.job}}: ${{ github.repository }}'
          SLACK_MESSAGE: 'Release deploy Success'
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: Github Actions

      - name: Slack Notify End - Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK_URL}}
          SLACK_TITLE: 'Job ${{github.job}}: ${{ github.repository }}'
          SLACK_MESSAGE: 'Release deploy Failure'
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: Github Actions
